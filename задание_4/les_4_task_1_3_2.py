from cProfile import run
from random import randint


def test(func):
    number_list = [[2, 2, 1, 1, 3, 1, 1, 1, 5, 4],
            [5, 4, 3, 2, 2, 0, 3, 0, 3, 0, 1, 1, 3, 4, 0, 5, 5, 2, 2, 1, 3],
            [4, 5, 5, 2, 0, 4, 3, 4, 2, 1, 5, 3, 5, 5, 1, 4, 3, 0, 2, 1, 2, 1, 5, 5, 0, 0, 4, 2, 3, 2],
            [5, 3, 1, 4, 2, 2, 2, 2, 1, 0, 0, 4, 5, 1, 4, 1, 3, 4, 1, 4, 3, 0, 1, 0, 1, 2, 4, 3, 5, 4, 5, 3, 4, 3, 1, 5, 4, 4, 0, 3],
            [5, 1, 4, 3, 5, 1, 3, 2, 5, 1, 1, 1, 2, 5, 1, 3, 3, 2, 0, 3, 5, 3, 1, 2, 2, 2, 0, 0, 4, 2, 4, 5, 2, 4, 2, 1, 5, 0, 5, 2, 3, 1, 2, 5, 1, 3, 4,0, 3, 1]]
    lst = [[5, 1],
            [5, 3],
            [7, 5],
            [10, 4],
            [11, 1]]
    for i, item in enumerate(lst):
        assert item == func(number_list[i])
        print(f"Test {i+1}  OK")

"""4. Определить, какое число в массиве встречается чаще всего."""

def func(number_list):
    counter = {i:0 for i in frozenset(number_list)}
    for key in counter:
        number = number_list.count(key)
        counter[key] = number
    counter_max = [0, 0]
    for key, val in counter.items():
        if val > counter_max[0]:
            counter_max[0] = val
            counter_max[1] = key
    return counter_max

def func_time(n):
    if n == 0:
        number_list = [4, 0, 2, 1, 4, 4, 1, 0, 3, 2, 5, 0, 5, 4, 5, 0, 4, 3, 1, 4, 1, 3, 5, 4, 1, 3, 4, 5, 2, 3, 4, 0, 3, 5, 4, 2, 5, 5, 5, 4, 3, 2, 3, 1, 2, 0, 5,1, 5, 5, 4, 2, 3, 4, 2, 4, 5, 5, 0, 4, 1, 1, 0, 1, 1, 0, 3, 4, 4, 3, 3, 3, 1, 0, 1, 3, 2, 2, 1, 0, 5, 3, 4, 0, 2, 2, 4, 0, 5, 1, 3, 2, 2, 1, 5, 3, 3, 2, 5, 1]
    else:
        number_list = [4, 0, 5, 3, 4, 3, 5, 3, 5, 4, 3, 0, 1, 3, 0, 3, 5, 1, 5, 1, 5, 5, 1, 0, 3, 5, 3, 4, 0, 5, 4, 0, 1, 1, 3, 1, 1, 4, 4, 3, 0, 5, 2, 3, 4, 2, 1,1, 4, 2, 5, 2, 5, 5, 2, 2, 4, 2, 5, 3, 2, 0, 1, 5, 4, 5, 0, 5, 2, 4, 3, 3, 5, 2, 2, 1, 4, 1, 2, 5, 1, 1, 0, 3, 5, 5, 0, 3, 2, 4, 2, 2, 0, 4, 3, 0, 1, 1, 2, 3, 2, 4, 1, 2, 4, 0, 3, 5, 0, 0, 0, 2, 0, 3, 0, 2, 0, 5, 3, 2, 5, 2, 4, 2, 2, 5, 1, 3, 0, 2, 2, 5, 5, 5, 0, 3, 4, 1, 5, 2, 4, 3, 4, 3, 1, 5, 0, 4, 1, 5, 3, 4, 3, 0, 5, 5, 4, 1, 3, 3, 2, 2, 5, 2, 3, 5, 0, 1, 4, 1, 0, 0, 3, 5, 0, 1, 4, 1, 0, 4, 3, 4, 3, 2, 3, 0, 1, 1, 3,3, 5, 4, 2, 1, 1, 0, 0, 5, 2, 4, 0, 3, 4, 1, 1, 5, 2, 5, 0, 3, 1, 2, 1, 4, 2, 3, 4, 2, 1, 5, 1, 5, 2, 3, 3, 4, 2, 1, 3, 4, 1, 0, 2, 2, 4, 2, 0, 3, 3, 5, 1, 5, 1, 0, 5, 1, 1, 4, 5, 3, 2, 5, 4, 1, 5, 1, 1, 5, 5, 4, 5, 0, 3, 3, 3, 3, 4, 2, 3, 4, 1, 5, 1, 3, 4, 3, 2, 1, 1, 4, 0, 3, 5, 0, 3, 1, 3, 4, 3, 2, 1, 4, 5, 2, 0, 4, 2, 3, 4, 3, 0, 3, 4, 4, 2, 5, 1, 3, 5, 5, 1, 5, 2, 5, 1, 2, 0, 5, 4, 0, 0, 4, 2, 3, 0, 1, 1, 5, 1, 3, 2,1, 5, 1, 2, 5, 1, 4, 0, 4, 1, 4, 5, 2, 2, 4, 1, 1, 0, 5, 1, 4, 4, 3, 0, 4, 3, 2, 0, 1, 0, 3, 2, 4, 2, 0, 4, 2, 0, 4, 5, 4, 4, 0, 0, 4, 1, 0, 4, 1, 3, 1, 4, 0, 3, 0, 0, 0, 5, 1, 4, 1, 3, 4, 1, 5, 2, 5, 5, 2, 5, 1, 3, 3, 1, 2, 2, 4, 1, 5, 5, 3, 4, 1, 4, 4, 4, 1, 4, 1, 3, 3, 0, 2, 1, 4, 0, 1, 0, 4, 2, 3, 5, 0, 0, 2, 5, 2, 0, 5, 2, 2, 0, 2, 5, 5, 1, 1, 3, 0, 1, 2, 1, 5, 1, 0, 0, 5, 0, 0, 1, 3, 2, 2, 3, 1, 5, 2, 0, 4, 4, 4, 3,0, 2, 1, 0, 0, 3, 3, 0, 1, 1, 1, 3, 2, 2, 2, 2, 3, 4, 1, 2, 3, 2, 4, 3, 4, 0, 4]
    counter = {i:0 for i in frozenset(number_list)}
    for key in counter:
        number = number_list.count(key)
        counter[key] = number
    counter_max = [0, 0]
    for key, val in counter.items():
        if val > counter_max[0]:
            counter_max[0] = val
            counter_max[1] = key
    return counter_max




# test(func)

# 100
# number_list = [4, 0, 2, 1, 4, 4, 1, 0, 3, 2, 5, 0, 5, 4, 5, 0, 4, 3, 1, 4, 1, 3, 5, 4, 1, 3, 4, 5, 2, 3, 4, 0, 3, 5, 4, 2, 5, 5, 5, 4, 3, 2, 3, 1, 2, 0, 5,1, 5, 5, 4, 2, 3, 4, 2, 4, 5, 5, 0, 4, 1, 1, 0, 1, 1, 0, 3, 4, 4, 3, 3, 3, 1, 0, 1, 3, 2, 2, 1, 0, 5, 3, 4, 0, 2, 2, 4, 0, 5, 1, 3, 2, 2, 1, 5, 3, 3, 2, 5, 1]
# run("func(number_list)")
# 12 function calls in 0.000 seconds
# 1    0.000    0.000    0.000    0.000 les_4_task_1_3_2.py:22(func)

# 500
# number_list = [4, 0, 5, 3, 4, 3, 5, 3, 5, 4, 3, 0, 1, 3, 0, 3, 5, 1, 5, 1, 5, 5, 1, 0, 3, 5, 3, 4, 0, 5, 4, 0, 1, 1, 3, 1, 1, 4, 4, 3, 0, 5, 2, 3, 4, 2, 1,1, 4, 2, 5, 2, 5, 5, 2, 2, 4, 2, 5, 3, 2, 0, 1, 5, 4, 5, 0, 5, 2, 4, 3, 3, 5, 2, 2, 1, 4, 1, 2, 5, 1, 1, 0, 3, 5, 5, 0, 3, 2, 4, 2, 2, 0, 4, 3, 0, 1, 1, 2, 3, 2, 4, 1, 2, 4, 0, 3, 5, 0, 0, 0, 2, 0, 3, 0, 2, 0, 5, 3, 2, 5, 2, 4, 2, 2, 5, 1, 3, 0, 2, 2, 5, 5, 5, 0, 3, 4, 1, 5, 2, 4, 3, 4, 3, 1, 5, 0, 4, 1, 5, 3, 4, 3, 0, 5, 5, 4, 1, 3, 3, 2, 2, 5, 2, 3, 5, 0, 1, 4, 1, 0, 0, 3, 5, 0, 1, 4, 1, 0, 4, 3, 4, 3, 2, 3, 0, 1, 1, 3,3, 5, 4, 2, 1, 1, 0, 0, 5, 2, 4, 0, 3, 4, 1, 1, 5, 2, 5, 0, 3, 1, 2, 1, 4, 2, 3, 4, 2, 1, 5, 1, 5, 2, 3, 3, 4, 2, 1, 3, 4, 1, 0, 2, 2, 4, 2, 0, 3, 3, 5, 1, 5, 1, 0, 5, 1, 1, 4, 5, 3, 2, 5, 4, 1, 5, 1, 1, 5, 5, 4, 5, 0, 3, 3, 3, 3, 4, 2, 3, 4, 1, 5, 1, 3, 4, 3, 2, 1, 1, 4, 0, 3, 5, 0, 3, 1, 3, 4, 3, 2, 1, 4, 5, 2, 0, 4, 2, 3, 4, 3, 0, 3, 4, 4, 2, 5, 1, 3, 5, 5, 1, 5, 2, 5, 1, 2, 0, 5, 4, 0, 0, 4, 2, 3, 0, 1, 1, 5, 1, 3, 2,1, 5, 1, 2, 5, 1, 4, 0, 4, 1, 4, 5, 2, 2, 4, 1, 1, 0, 5, 1, 4, 4, 3, 0, 4, 3, 2, 0, 1, 0, 3, 2, 4, 2, 0, 4, 2, 0, 4, 5, 4, 4, 0, 0, 4, 1, 0, 4, 1, 3, 1, 4, 0, 3, 0, 0, 0, 5, 1, 4, 1, 3, 4, 1, 5, 2, 5, 5, 2, 5, 1, 3, 3, 1, 2, 2, 4, 1, 5, 5, 3, 4, 1, 4, 4, 4, 1, 4, 1, 3, 3, 0, 2, 1, 4, 0, 1, 0, 4, 2, 3, 5, 0, 0, 2, 5, 2, 0, 5, 2, 2, 0, 2, 5, 5, 1, 1, 3, 0, 1, 2, 1, 5, 1, 0, 0, 5, 0, 0, 1, 3, 2, 2, 3, 1, 5, 2, 0, 4, 4, 4, 3,0, 2, 1, 0, 0, 3, 3, 0, 1, 1, 1, 3, 2, 2, 2, 2, 3, 4, 1, 2, 3, 2, 4, 3, 4, 0, 4]
# run("func(number_list)")
# 12 function calls in 0.000 seconds
# 1     0.000    0.000    0.000    0.000 les_4_task_1_3_2.py:22(func)

# 100
# "les_4_task_1_3_2.func_time(0)"
# 1000 loops, best of 5: 17 usec per loop

# 500
# "les_4_task_1_3_1.func_time(1)"
# 1000 loops, best of 5: 75.3 usec per loop